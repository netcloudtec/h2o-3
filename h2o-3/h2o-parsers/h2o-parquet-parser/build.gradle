//
// H2O Parquet Parser
//
description = "H2O Parquet Parser"

def parquetHadoopVersion = binding.variables.get("hadoopVersion") ?
  binding.variables.get("hadoopVersion") : defaultHadoopClientVersion

configurations{
    // Configuration used to get all transitive dependencies for org.apache.hadoop:hadoop-common
    hadoopCommonExclude
}

dependencies {
  hadoopCommonExclude("org.apache.hadoop:hadoop-common:${parquetHadoopVersion}")

  compile project(":h2o-core")
  compile(project(":h2o-persist-hdfs")) {
    exclude group: 'ai.h2o', module: 'h2o-core'
    exclude group: 'net.java.dev.jets3t', module: 'jets3t'
    exclude group: 'org.apache.hadoop', module: 'hadoop-client'
    exclude group: 'org.apache.hadoop', module: 'hadoop-aws'
  }

  // Parquet support
  compile("org.apache.parquet:parquet-hadoop:${defaultParquetVersion}")


  compile("org.apache.hadoop:hadoop-common:${parquetHadoopVersion}") {
    // we can't use transitive=false so we need to exclude the dependencies manually
    configurations.hadoopCommonExclude.getResolvedConfiguration().getResolvedArtifacts().each {
      if (it.moduleVersion.id.group != "org.apache.hadoop" && it.moduleVersion.id.module.name != "hadoop-common") {
        exclude group: it.moduleVersion.id.group, module: it.moduleVersion.id.module.name
      }
    }
  }

  testCompile "junit:junit:${junitVersion}"
  testCompile project(path: ":h2o-core", configuration: "testArchives")
  testCompile("org.apache.parquet:parquet-avro:${defaultParquetVersion}")
  // We need correct version of MapRe Hadoop to run JUnits
  testCompile("org.apache.hadoop:hadoop-client:${parquetHadoopVersion}") {
    exclude module: "servlet-api"
  }
}

apply from: "${rootDir}/gradle/dataCheck.gradle"

test {
  dependsOn ":h2o-core:testJar"
  dependsOn smalldataCheck, cpLibs, jar, testJar, testMultiNode

  // Defeat task 'test' by running no tests.
  exclude '**'
}
