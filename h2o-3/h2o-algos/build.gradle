//
// H2O Algos Module
//
description = "H2O Algorithms"

dependencies {
  compile project(":h2o-core")
  // Include ad-hoc dependency represented by deepwater fat jar
  if (file("${rootDir}/lib/deepwater-all.jar").exists()) {
      compile files("${rootDir}/lib/deepwater-all.jar")
  }

  // Jama dependencies
  compile "gov.nist.math:jama:1.0.3"

  // netlib-java / MTJ dependencies

  // Manually define all dependencies in com.github.fommil.netlib:all:1.1.2 to make Databricks maven resolver happy
  compile('com.github.fommil.netlib:core:1.1.2')
  compile('net.sourceforge.f2j:arpack_combined_all:0.1')
  compile('com.github.fommil.netlib:netlib-native_ref-osx-x86_64:1.1:natives')
  compile('com.github.fommil.netlib:netlib-native_ref-linux-x86_64:1.1:natives')
  compile('com.github.fommil.netlib:netlib-native_ref-win-x86_64:1.1:natives')
  compile('com.github.fommil.netlib:netlib-native_ref-linux-armhf:1.1:natives')
  compile('com.github.fommil.netlib:netlib-native_system-osx-x86_64:1.1:natives')
  compile('com.github.fommil.netlib:netlib-native_system-linux-x86_64:1.1:natives')
  compile('com.github.fommil.netlib:netlib-native_system-linux-armhf:1.1:natives')
  compile('com.github.fommil.netlib:netlib-native_system-win-x86_64:1.1:natives')

  compile('com.googlecode.matrix-toolkits-java:mtj:1.0.4'){
    exclude group: 'com.github.fommil.netlib', module: 'all'
  }


  // Test dependencies only
  testCompile "junit:junit:${junitVersion}"
  testCompile project(path: ":h2o-core", configuration: "testArchives")
}

apply from: "${rootDir}/gradle/dataCheck.gradle"

task testSSLEncryption(type: Exec) {
  dependsOn cpLibs, jar, testJar
  if(project.hasProperty('doTestSSL')) {
      commandLine 'bash', './testSSL.sh'
  } else {
    commandLine 'echo', 'SSL tests not enabled'
  }
}

// The default 'test' behavior is broken in that it does not grok clusters.
// For H2O, all tests need to be run on a cluster, where each JVM is
// "free-running" - it's stdout/stderr are NOT hooked by another process.  If
// they are hooked (e.g., by the gradle driver process) then the stdout/err get
// buffered and when all CPUs are maxed out (happens over a large fraction of
// the test run) no output is visible.  If the JVMs then crash (again, common
// enough), we get NO output for the test run.  So instead we need to arrange a
// complete cluster of free-running JVMs and redirect all output (at the OS
// level) to files - then scrape the files later for test results.
test {
  dependsOn ":h2o-core:testJar"
  dependsOn smalldataCheck, cpLibs, jar, testJar, testSingleNode, testMultiNode, testSSLEncryption

  // Defeat task 'test' by running no tests.
  exclude '**'
}
