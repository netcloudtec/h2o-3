// Gradle file for jacoco code coverage

apply plugin: 'jacoco'

//
// When using v2.0+ of the Jenkins JaCoCo plugin, the
// JaCoCo version needs to be v0.7.5+
// 
jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("${buildDir}/reports/jacoco/")
}

repositories {
    mavenCentral()
}

String destination = "${buildDir}/reports/jacoco/report.exec"

task jacocoAgentLink(type: Exec) {
    //String location = project.configurations.testRuntime.find { it.name.startsWith("org.jacoco.agent") }
    //commandLine "ln", "-sf", location, "${rootDir}/jacoco/jacocoagent2.jar"
    String location = project.configurations.jacocoAgent.find { it.name.startsWith("org.jacoco.agent") }
    commandLine "jar", "xf", location, "jacocoagent.jar"
    workingDir "${rootDir}/jacoco/"
    workingDir.mkdirs()
}

task jacocoMergeExecs(type: JacocoMerge) {
    FileTree execs = fileTree(dir: "${rootDir}", include: "**/*.exec")
    executionData = execs
    destinationFile = new File(destination) 
}

//
// Generate a test report for all tests
//
jacocoTestReport {
    // String to help locate the directories of the source code
    String sourceDirEnd = "/src/main/java/"

    // Collect .exec file
    FileTree execLocation = fileTree(destination)
    executionData = execLocation

    // Collect source files
    FileTree sourceLocation = fileTree("$rootDir")
    sourceLocation.include ("**" + sourceDirEnd + "**")
    sourceLocation.each {File file ->
    	String fileDir = file.getParent() + "/"
	fileDir = fileDir.substring(0, (fileDir.lastIndexOf(sourceDirEnd) + sourceDirEnd.length()))
    	if (sourceDirectories == null) {
	   sourceDirectories = files(fileDir)
	} else {
           sourceDirectories = sourceDirectories + files(fileDir)
	}
    }

    // Collect class files
    FileTree classLocation = fileTree(dir: "$rootDir", include: "**/build/libs/**/*.jar", excludes: ["build/", "h2o-assemblies/"])
    classDirectories = classLocation
    
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task cleanCoverageReports(type: Delete) {
    delete files("${buildDir}/reports/jacoco")
}

task cleanCoverageData (type: Delete) {
    delete file("${buildDir}/reports/jacoco/report.exec")
}

jacocoTestReport.dependsOn jacocoMergeExecs
