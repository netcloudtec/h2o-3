//
// Micro benchmark support
//

apply plugin: 'me.champeau.gradle.jmh'

ext {
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version)
    String date = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("UTC"))

    // Environment for the run
    jmhRunDate = date
    jmhRunSha = bv.getLastCommitHash()
    jmhResultFileName = "${bv.getLastCommitHash()}-${date}.csv"
    jmhResultFile = project.file("${project.buildDir}/reports/jmh/$jmhResultFileName")

    // ubench - post-processed output
    ubenchResultFile = project.file("${project.buildDir}/reports/ubench/$jmhResultFileName")
}

// Setup JMH
jmh {
    //
    // Include only selected tests for benchmarking
    if (project.hasProperty('ubenchIncludeOnly')) {
        include = project.ubenchIncludeOnly
    }
    jmhVersion = '1.21'
    resultsFile = project.jmhResultFile
    duplicateClassesStrategy = 'warn'
    resultFormat = 'CSV'
    //
    // Attach different profilers (gc, stack summary, ...)
    // See: http://java-performance.info/introduction-jmh-profilers/
    //profilers = ['stack'] // ['hs_comp']
}

dependencies {
    jmh group: 'commons-io' , name: 'commons-io', version: '2.4'
}

task jmhPostProcess(dependsOn: "jmh") {
    doFirst {
        project.ubenchResultFile.getParentFile().mkdirs()
    }
    doLast {
        def results = project.jmhResultFile.readLines()
        def header = "\"SHA\",\"Date\"," + results.head()
        def data = results.tail().collect { "\"${project.jmhRunSha}\",\"${project.jmhRunDate}\",$it" }
        project.ubenchResultFile.withWriter{ out ->
            out.println header
            data.each { out.println it }
        }
        logger.error("Ubench reported in ${project.ubenchResultFile}")
    }
}

task uploadResultsToS3(type: water.build.tasks.S3UploadTask) {
    bucket = "ai.h2o.ubench"
    objectName = "${project.name}/$jmhResultFileName"
    file = ubenchResultFile
    enabled = project.hasProperty("doUploadUBenchResults") && project.doUploadUBenchResults == "true"
}

task ubench
ubench.dependsOn jmhPostProcess
ubench.dependsOn uploadResultsToS3
uploadResultsToS3.shouldRunAfter("jmhPostProcess")
