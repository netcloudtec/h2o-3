// Actually run the tests by building a cluster of free-running JVMs first.
task testSingleNode(type: Exec) {
    dependsOn jar, testJar

    environment "ROOT_DIR", rootDir
    environment "PROJECT_NAME", project.name
    environment "BUILD_DIR", project.buildDir
    doFirst {
        environment "JVM_CLASSPATH", sourceSets.test.runtimeClasspath.asPath
    }

    def args = ['bash', './testSingleNode.sh']
    if (project.hasProperty("jacocoCoverage")) {
        args << 'jacoco'
    }
    commandLine args
}
task testSingleNodeOneProc(type: Exec) {
    dependsOn jar, testJar

    environment "ROOT_DIR", rootDir
    environment "PROJECT_NAME", project.name
    environment "BUILD_DIR", project.buildDir
    doFirst {
        environment "JVM_CLASSPATH", sourceSets.test.runtimeClasspath.asPath
    }

    def args = ['bash', './testSingleNodeOneProc.sh']
    if (project.hasProperty("jacocoCoverage")) {
        args << 'jacoco'
    }
    commandLine args
}
task testMultiNode(type: Exec) {
    dependsOn jar, testJar

    environment "ROOT_DIR", rootDir
    environment "PROJECT_NAME", project.name
    environment "BUILD_DIR", project.buildDir
    doFirst {
        environment "JVM_CLASSPATH", sourceSets.test.runtimeClasspath.asPath
    }

    def args = ['bash', './testMultiNode.sh']

    if(project.hasProperty('doTestSSL')) {
        args << 'ssl'
    }

    if (project.hasProperty("jacocoCoverage")) {
        args << 'jacoco'
    }
    commandLine args
}
