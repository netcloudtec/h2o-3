// Generated by CoffeeScript 1.9.1
(function() {
  var createCatalog, fiction, fs, htmlparser, markdownFilePath, mkdirp, nameNodes, outputDirectory, path, processMarkdownFile, ref, stripHtmlTags, walkNodes;

  fs = require('fs');

  path = require('path');

  mkdirp = (require('mkdirp')).sync;

  htmlparser = require('htmlparser2');

  fiction = require('fiction');

  stripHtmlTags = function(html) {
    var _text, parser;
    _text = '';
    parser = new htmlparser.Parser({
      ontext: function(text) {
        return _text += text;
      }
    });
    parser.write(html);
    parser.end();
    return _text;
  };

  nameNodes = function(nodes, prefix) {
    var i, len, node, nodeIndex;
    for (nodeIndex = i = 0, len = nodes.length; i < len; nodeIndex = ++i) {
      node = nodes[nodeIndex];
      node.name = "" + (prefix ? prefix + '_' : '') + (nodeIndex + 1);
      if (node.children.length) {
        nameNodes(node.children, node.name);
      }
    }
  };

  walkNodes = function(nodes, go) {
    var i, len, node;
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      go(node);
      if (node.children.length) {
        walkNodes(node.children, go);
      }
    }
  };

  createCatalog = function(nodes, catalog) {
    var children, i, len, node;
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      createCatalog(node.children, children = []);
      catalog.push({
        name: node.name,
        title: node.title,
        children: children
      });
    }
  };

  processMarkdownFile = function(markdownFilePath, outputDirectory) {
    var catalog, nodes;
    nodes = fiction(fs.readFileSync(markdownFilePath, {
      encoding: 'utf8'
    }));
    nameNodes(nodes, '');
    mkdirp(outputDirectory);
    walkNodes(nodes, function(node) {
      return fs.writeFileSync(path.join(outputDirectory, node.name + ".html"), node.content);
    });
    createCatalog(nodes, catalog = []);
    return fs.writeFileSync(path.join(outputDirectory, 'catalog.json'), JSON.stringify(catalog, null, 2));
  };

  ref = process.argv.slice(2), markdownFilePath = ref[0], outputDirectory = ref[1];

  processMarkdownFile(markdownFilePath, outputDirectory);

}).call(this);
