//
// H2O Web Module
//
import org.apache.tools.ant.taskdefs.condition.Os

description = "H2O web client"

// Represents external dependencies which will be put into web root and accessible
// via REST API
configurations {
    publishedJars
}

dependencies {
    // Dependency on shared model support which is served by web backend as a file
    publishedJars project(path: ':h2o-assemblies:genmodel', configuration: 'shadow')
}

static def checkPrerequisite(name) {
  def prefix = Os.isFamily(Os.FAMILY_WINDOWS) ? 'cmd /c ' : '/usr/bin/env '
  def command = prefix + name + ' -v'
  def proc
  try {
    proc = command.execute()
    if (proc != null) {
      proc.waitFor()
    }
  } catch(ignored) {
    return -1
  }
  if (proc == null || (proc != null && proc.exitValue() != 0)) {
    return -1
  }
  return 0
}

task checkClientPrerequisites {
    doLast {
        def nodeInstallationInstruction = """\

To install node.js, try one of these:

Mac OS:
Use the official installer at http://nodejs.org/download/
OR
If you have homebrew installed, run 'brew install node'.

Linux:
See https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager

Windows:
Use the official installer at http://nodejs.org/download/

"""

        def nodeFailureMessage = "Could not detect a node.js installation on this system.\nInstall node.js and try again.\n" + nodeInstallationInstruction

        if (checkPrerequisite('node') != 0) {
            if (Os.isFamily(Os.FAMILY_MAC)) {
                if (checkPrerequisite('/usr/local/bin/node') != 0) {
                    throw new StopExecutionException(nodeFailureMessage)
                }
            } else {
                throw new StopExecutionException(nodeFailureMessage)
            }
        }
    }
}

task installNpmPackages(type: Exec) {
  commandLine = getOsSpecificCommandLine([ 'npm', 'install' ])
}

task installBowerPackages(type: Exec) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/c', 'node_modules\\.bin\\bower', 'install'
  } else {
    if (project.hasProperty("h2o.web.allow.root")) {
        commandLine 'node_modules/.bin/bower', 'install', '--allow-root'
    } else {
        commandLine 'node_modules/.bin/bower', 'install'
    }
  }
}

task deleteLegacyFlowBundleFromWebRoot(type: Delete) {
  delete 'lib/h2o-flow/build/js/flow.js'
}

task copyFlowBundleFromDrift() {
    doLast {
        def f = new File('h2o-web/lib/h2o-flow/build/js/flow.js')
        new URL('https://cdn.rawgit.com/h2oai/drift/664a4870e576e1c58a0e47fa557a7cb29dbf47dc/build/flow.js').withInputStream { i ->
            f.withOutputStream {
                it << i
            }
        }
    }
}

task copyFlowToWebRoot(type: Copy) {
  from 'lib/h2o-flow/build'
  into 'src/main/resources/www/flow'
}

task copyGenModelJarToWebRoot(type: Copy) {
  from {
      configurations.publishedJars.filter { it.name.contains("genmodel") }
  }
  into "src/main/resources/www/${h2oRESTApiVersion}/"
  rename { filename -> "h2o-genmodel.jar"}
}

task copyDeepWaterJarToWebRoot(type: Copy) {
  from {
      file("${rootDir}/lib/deepwater-all.jar")
  }
  into "src/main/resources/www/${h2oRESTApiVersion}/"
}

task deleteBowerModules(type: Delete) {
  delete 'lib'
}

task deleteNodeModules(type: Delete) {
  delete 'node_modules'
}

task deleteFlowFromWebRoot(type: Delete) {
  delete 'src/main/resources/www/flow'
}

task deleteGenModelJarFromWebRoot(type: Delete) {
    delete "src/main/resources/www/${h2oRESTApiVersion}/h2o-genmodel.jar"
}

task deleteDeepWaterJarFromWebRoot(type: Delete) {
    delete "src/main/resources/www/${h2oRESTApiVersion}/deepwater-all.jar"
}


def exampleFlowsOutputDir = "$rootDir/h2o-web/src/main/resources/www/flow/packs"

task copyExampleFlows(type: Copy) {
  from "$rootDir/h2o-docs/src/product/flow/packs"
  into exampleFlowsOutputDir
}

task compileHelpFiles(type: Exec) {
  commandLine = getOsSpecificCommandLine([ 'node', 'make-help.js', "$rootDir/h2o-docs/src/product/flow/README.md", "$rootDir/h2o-web/src/main/resources/www/flow/help" ])
}

task copyHelpImages(type: Copy) {
  from "$rootDir/h2o-docs/src/product/flow/images"
  into "$rootDir/h2o-web/src/main/resources/www/flow/help/images"
}

task cleanUpSmokeTest {
    doLast {
        new File(["results"].join(File.separator)).deleteDir()
    }
}

task compileAndInstallDocFiles(type: Exec) {
    doFirst {
        file("${buildDir}/tmp").mkdirs()
        standardOutput = new FileOutputStream("${buildDir}/tmp/h2o-web_compileAndInstallDocFiles.out")
    }
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version);
    def projectVersion = bv.getProjectVersion()
    def branchName = bv.getBranch()
    def buildNumber = bv.getBuildNumber()
    def lastCommitHash = bv.getLastCommitHash()
    commandLine = getOsSpecificCommandLine(['.' + File.separator + 'node_modules' + File.separator + '.bin' + File.separator + 'coffee', 'rest-api-reference.coffee',
                                            "--project_version=" + projectVersion,
                                            "--branch_name=" + branchName,
                                            "--build_number=" + buildNumber,
                                            "--last_commit_hash=" + lastCommitHash
                                           ])
}

task deleteDocFiles(type: Delete) {
    delete '../h2o-docs/web'
}

installNpmPackages.dependsOn checkClientPrerequisites
installBowerPackages.dependsOn installNpmPackages
// deleteLegacyFlowBundleFromWebRoot.dependsOn installBowerPackages
// copyFlowBundleFromDrift.dependsOn deleteLegacyFlowBundleFromWebRoot
// copyFlowToWebRoot.dependsOn copyFlowBundleFromDrift
copyFlowToWebRoot.dependsOn installBowerPackages

compileHelpFiles.dependsOn installNpmPackages

// Prepare resource stage fetch all necessary artifacts and put there under src/../resources
processResources.dependsOn copyFlowToWebRoot
processResources.dependsOn copyExampleFlows
processResources.dependsOn compileHelpFiles
processResources.dependsOn copyHelpImages
processResources.dependsOn copyGenModelJarToWebRoot
processResources.dependsOn copyDeepWaterJarToWebRoot

compileAndInstallDocFiles.dependsOn installNpmPackages
compileAndInstallDocFiles.dependsOn ":h2o-bindings:runGenerateRESTAPIBindingsSrc"
build.dependsOn compileAndInstallDocFiles

// Hook clean stage
clean.dependsOn deleteFlowFromWebRoot, cleanUpSmokeTest, deleteGenModelJarFromWebRoot, deleteDeepWaterJarFromWebRoot, deleteDocFiles
